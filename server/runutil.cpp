//----------------------------------------------------
//
//	Utility runtime procedures
//	(c) 2005 Kye Bitossi
//
//  Version: $Id: runutil.cpp,v 1.4 2006/03/20 17:59:34 kyeman Exp $
// 
//----------------------------------------------------

#include "main.h"

//----------------------------------------------------
static const char* g_szVehicleNames[] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster",
	"Stretch","Manana",	"Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam",
	"Esperanto","Taxi","Washington","Bobcat","Mr.Whoopee","BF Injection","Hunter","Premier","Enforcer",
	"Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Article Trailer","Previon",
	"Coach","Cabbie","Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squallo",
	"Seasparrow","Pizzaboy","Tram","Article Trailer 2","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Topfun Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre",
	"Rustler","ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer",
	"Maverick","SAN News Maverick","Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer",
	"Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring Racer A",
	"Hotring Racer B","Bloodring Banger","Rancher Lure","Super GT","Elegant","Journey","Bike","Mountain Bike",
	"Beagle","Cropduster","Stuntplane","Tanker","Roadtrain","Nebula","Majestic","Buccaneer","Shamal","Hydra",
	"FCR-900","NRG-500","HPV1000","Cement Truck","Towtruck","Fortune","Cadrona","FBI Truck","Willard",
	"Forklift","Tractor","Combine Harvester","Feltzer","Remington","Slamvan","Blade","Freight","Brownstreak",
	"Vortex","Vincent","Bullet","Clover","Sadler","Firetruck LA","Hustler","Intruder","Primo","Cargobob",
	"Tampa","Sunrise","Merit","Utility Van","Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus",
	"Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito",
	"Freight Flat Trailer","Streak Trailer","Kart","Mower","Dune","Sweeper","Broadway","Tornado","AT400",
	"DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Petrol Trailer","Emperor","Wayfarer","Euros",
	"Hotdog","Club","Freight Box Trailer","Article Trailer 3","Andromada","Dodo","RC Cam","Launch",
	"Police Car (LSPD)","Police Car (SFPD)","Police Car (LVPD)","Police Ranger","Picador","S.W.A.T.","Alpha",
	"Phoenix","Glendale Shit","Sadler Shit","Baggage Trailer A","Baggage Trailer B","Tug Stairs Trailer",
	"Boxville","Farm Trailer","Utility Trailer"
};

static const float g_fModelInfo[212][27] = {
	{2.33f,5.12f,1.64f,0.33f,0.03f,-0.2f,0.44f,-0.7f,-0.22f,-1.1f,-2.06f,-0.07f,0.88f,1.38f,-0.61f,0.88f,-1.39f,-0.61f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.49f,0.0f,0.0f,-0.46f}, // 400
	{2.57f,5.83f,1.71f,0.5f,-0.06f,-0.12f,0.0f,0.0f,0.0f,1.09f,-0.94f,0.0f,0.98f,1.63f,-0.35f,0.98f,-1.49f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.11f}, // 401
	{2.41f,5.8f,1.53f,0.54f,-0.35f,-0.16f,0.0f,0.0f,0.0f,1.04f,-1.92f,0.14f,0.97f,1.52f,-0.35f,0.97f,-1.55f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.48f,0.0f,0.0f,-0.31f}, // 402
	{3.15f,9.22f,4.18f,0.43f,1.45f,0.34f,0.0f,0.0f,0.0f,-1.45f,0.07f,-0.8f,1.12f,3.56f,-0.95f,1.12f,-3.45f,-0.95f,1.12f,-2.25f,-0.95f,0.0f,0.0f,-0.7f,0.0f,0.0f,-50.0f}, // 403
	{2.2f,5.81f,1.84f,0.46f,-0.13f,-0.03f,0.47f,-1.07f,-0.01f,-0.94f,-2.36f,-0.01f,0.8f,1.54f,-0.33f,0.8f,-1.57f,-0.33f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.14f,0.0f,0.0f,-0.15f}, // 404
	{2.35f,6.0f,1.49f,0.43f,0.0f,-0.19f,0.4f,-0.98f,-0.24f,-1.04f,-2.18f,-0.04f,0.84f,1.64f,-0.45f,0.84f,-1.64f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.2f,0.0f,0.0f,-0.2f}, // 405
	{5.27f,11.59f,4.42f,1.38f,2.56f,0.78f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,2.01f,3.2f,-1.25f,2.01f,-1.97f,-1.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 406
	{2.85f,8.96f,2.7f,0.6f,2.89f,0.2f,0.0f,0.0f,0.0f,-1.11f,-3.66f,-0.54f,1.05f,2.45f,-0.7f,1.05f,-2.05f,-0.7f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.5f,0.0f,0.0f,-50.0f}, // 407
	{3.12f,10.69f,3.91f,0.44f,2.73f,-0.11f,0.0f,0.0f,0.0f,-1.23f,1.3f,-0.66f,1.09f,4.04f,-0.97f,1.09f,-2.22f,-0.97f,1.09f,-1.08f,-0.97f,0.0f,0.0f,-0.53f,0.0f,0.0f,-50.0f}, // 408
	{2.37f,8.18f,1.53f,0.46f,1.06f,-0.14f,0.46f,-1.87f,-0.22f,-0.98f,-2.83f,0.12f,0.89f,2.75f,-0.35f,0.89f,-2.74f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.31f}, // 409
	{2.26f,5.01f,1.8f,0.42f,-0.17f,-0.05f,0.0f,0.0f,0.0f,-1.02f,-1.67f,0.21f,0.82f,1.39f,-0.29f,0.82f,-1.38f,-0.29f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.04f,0.0f,0.0f,-0.01f}, // 410
	{2.39f,5.78f,1.37f,0.49f,0.05f,-0.21f,0.0f,0.0f,0.0f,1.09f,-2.1f,0.09f,0.95f,1.71f,-0.35f,0.95f,-1.71f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.51f,0.0f,0.0f,-0.37f}, // 411
	{2.45f,7.31f,1.39f,0.46f,-0.13f,-0.23f,0.0f,0.0f,0.0f,0.0f,-3.55f,-0.17f,0.93f,1.89f,-0.35f,0.93f,-1.88f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.36f,0.0f,0.0f,-0.35f}, // 412
	{2.28f,5.88f,2.23f,0.49f,0.78f,0.06f,0.53f,-1.74f,-0.02f,-1.05f,0.34f,-0.53f,0.88f,1.8f,-0.64f,0.92f,-1.85f,-0.64f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.32f,0.0f,0.0f,-0.32f}, // 413
	{2.52f,7.07f,4.6f,0.44f,0.96f,0.22f,0.0f,0.0f,0.0f,-0.92f,-0.74f,-0.7f,0.91f,2.14f,-0.62f,0.91f,-2.13f,-0.62f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.4f,0.0f,0.0f,-0.28f}, // 414
	{2.32f,5.51f,1.14f,0.42f,0.0f,-0.33f,0.0f,0.0f,0.0f,-1.13f,-2.07f,0.02f,0.91f,1.57f,-0.36f,0.91f,-1.61f,-0.36f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.07f}, // 415
	{2.73f,8.01f,3.4f,0.42f,0.95f,0.06f,0.85f,-2.73f,0.08f,-1.35f,-2.74f,-0.19f,0.96f,2.22f,-0.67f,1.18f,-2.18f,-0.67f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.34f,0.0f,0.0f,-50.0f}, // 416
	{5.45f,23.27f,6.61f,0.44f,3.27f,0.6f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 417
	{2.57f,5.67f,2.14f,0.52f,0.46f,-0.13f,0.45f,-0.68f,-0.24f,1.21f,-1.57f,-0.08f,1.01f,1.8f,-0.68f,1.01f,-1.7f,-0.68f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.49f,0.0f,0.0f,-0.49f}, // 418
	{2.4f,6.22f,1.41f,0.41f,-0.21f,-0.25f,0.0f,0.0f,0.0f,-1.08f,-1.99f,0.03f,0.9f,1.62f,-0.43f,0.9f,-1.62f,-0.43f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.42f,0.0f,0.0f,-0.36f}, // 419
	{2.41f,5.91f,1.77f,0.52f,0.06f,-0.14f,0.52f,-1.03f,-0.11f,-1.1f,-2.15f,0.1f,0.92f,1.64f,-0.35f,0.92f,-1.64f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.32f}, // 420
	{2.25f,6.39f,1.37f,0.45f,0.11f,-0.23f,0.43f,-1.08f,-0.23f,-1.07f,-2.44f,-0.17f,0.84f,1.74f,-0.48f,0.84f,-1.74f,-0.48f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.33f,0.0f,0.0f,-0.29f}, // 421
	{2.27f,5.38f,1.55f,0.41f,0.07f,-0.18f,0.0f,0.0f,0.0f,-1.08f,-0.42f,-0.2f,0.86f,1.49f,-0.55f,0.86f,-1.49f,-0.55f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.36f}, // 422
	{2.32f,4.84f,4.91f,0.58f,0.67f,0.2f,0.0f,0.0f,0.0f,-1.17f,-1.9f,-0.32f,0.91f,1.71f,-0.63f,0.89f,-1.3f,-0.63f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.56f,0.0f,0.0f,-0.62f}, // 423
	{2.46f,3.86f,1.78f,0.39f,-0.09f,-0.09f,0.0f,0.0f,0.0f,0.18f,1.08f,0.43f,1.0f,1.09f,-0.28f,1.0f,-1.08f,-0.28f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.36f,0.0f,0.0f,0.01f}, // 424
	{5.16f,18.63f,5.19f,0.0f,2.55f,0.19f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 425
	{2.41f,5.91f,1.77f,0.52f,0.06f,-0.14f,0.52f,-1.03f,-0.11f,-1.1f,-2.15f,0.09f,0.92f,1.64f,-0.35f,0.92f,-1.64f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.32f}, // 426
	{2.64f,8.2f,3.23f,0.38f,1.1f,0.25f,0.71f,-2.76f,0.14f,-1.27f,-3.2f,-0.16f,0.91f,2.52f,-0.53f,1.01f,-2.29f,-0.53f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.41f,0.0f,0.0f,-50.0f}, // 427
	{2.73f,6.28f,3.48f,0.65f,0.65f,0.14f,0.75f,-2.42f,0.21f,-1.01f,-3.06f,-0.49f,0.91f,1.95f,-0.64f,1.03f,-1.75f,-0.64f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.52f,0.0f,0.0f,-50.0f}, // 428
	{2.21f,5.18f,1.28f,0.49f,-0.5f,-0.27f,0.0f,0.0f,0.0f,0.99f,-2.14f,0.14f,0.87f,1.57f,-0.25f,0.87f,-1.57f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.26f}, // 429
	{4.77f,16.9f,5.92f,0.4f,0.52f,0.98f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 430
	{3.01f,12.21f,4.42f,0.71f,4.73f,0.38f,0.75f,5.14f,-0.53f,-1.45f,-5.47f,-0.13f,1.11f,3.94f,-0.5f,1.11f,-3.9f,-0.5f,1.11f,-2.86f,-0.5f,0.0f,0.0f,-0.39f,0.0f,0.0f,-0.39f}, // 431
	{4.3f,9.17f,3.88f,0.38f,2.77f,-0.19f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.63f,3.1f,-0.35f,1.63f,-3.1f,-0.35f,1.63f,0.0f,-0.35f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 432
	{3.4f,10.0f,4.86f,0.49f,1.16f,0.52f,0.0f,0.0f,0.0f,-1.52f,0.16f,-0.68f,1.29f,2.99f,-0.8f,1.29f,-2.99f,-0.8f,1.29f,-1.56f,-0.8f,0.0f,0.0f,-0.36f,0.0f,0.0f,-0.05f}, // 433
	{2.29f,4.57f,1.72f,0.26f,-0.45f,-0.33f,0.0f,0.0f,0.0f,-0.73f,-1.58f,0.29f,0.9f,1.8f,-0.59f,1.02f,-1.39f,-0.5f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 434
	{3.16f,13.53f,4.77f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.01f,-1.44f,-0.95f,1.01f,-2.73f,-0.95f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 435
	{2.28f,5.51f,1.72f,0.4f,-0.17f,-0.08f,0.0f,0.0f,0.0f,-1.07f,-1.82f,0.14f,0.85f,1.38f,-0.35f,0.85f,-1.4f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.07f,0.0f,0.0f,-0.07f}, // 436
	{3.04f,11.76f,4.01f,0.21f,4.29f,1.0f,0.75f,2.71f,-0.53f,-1.49f,-4.97f,-0.5f,1.22f,3.95f,-0.5f,1.22f,-3.94f,-0.5f,1.22f,-2.83f,-0.5f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.44f}, // 437
	{2.41f,5.82f,1.72f,0.46f,0.42f,-0.29f,0.46f,-0.61f,-0.29f,-1.09f,-1.93f,-0.02f,0.95f,1.92f,-0.55f,0.95f,-1.91f,-0.55f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.58f,0.0f,0.0f,-0.58f}, // 438
	{2.22f,5.29f,1.47f,0.49f,-0.54f,-0.22f,0.0f,0.0f,0.0f,-1.11f,-1.51f,0.06f,0.88f,1.56f,-0.45f,0.88f,-1.51f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.35f,0.0f,0.0f,-0.13f}, // 439
	{2.31f,5.56f,2.76f,0.5f,0.75f,-0.05f,0.54f,-1.79f,-0.09f,-1.09f,-0.46f,-0.42f,0.88f,1.78f,-0.75f,0.88f,-1.85f,-0.75f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.59f,0.0f,0.0f,-0.63f}, // 440
	{0.87f,1.41f,1.02f,0.06f,-0.07f,0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.26f,0.4f,0.03f,0.26f,-0.4f,0.03f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 441
	{2.61f,6.68f,1.76f,0.49f,0.27f,-0.19f,0.0f,0.0f,0.0f,-1.21f,-2.21f,0.06f,0.98f,2.0f,-0.46f,0.98f,-2.0f,-0.46f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.33f,0.0f,0.0f,-0.2f}, // 442
	{4.16f,20.05f,4.43f,0.39f,2.88f,0.32f,0.0f,0.0f,0.0f,-1.53f,1.24f,-0.9f,1.22f,4.86f,-0.96f,1.22f,-5.17f,-0.96f,1.22f,-4.04f,-0.96f,0.0f,0.0f,-0.74f,0.0f,0.0f,-50.0f}, // 443
	{3.66f,6.02f,3.29f,0.54f,0.35f,0.6f,0.0f,0.0f,0.0f,0.0f,-2.6f,-0.06f,1.37f,1.91f,-0.45f,1.37f,-1.91f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 444
	{2.3f,5.86f,1.75f,0.48f,-0.03f,-0.16f,0.48f,-1.14f,-0.16f,-1.04f,-1.94f,0.13f,0.91f,1.74f,-0.46f,0.91f,-1.74f,-0.46f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.37f,0.0f,0.0f,-0.34f}, // 445
	{4.77f,17.02f,4.31f,0.69f,0.25f,1.07f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 446
	{2.42f,14.8f,3.15f,0.42f,0.95f,-0.07f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 447
	{0.71f,2.19f,1.63f,0.0f,-0.34f,0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.68f,-0.27f,0.0f,-0.67f,-0.27f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 448
	{3.03f,9.03f,4.99f,0.46f,3.36f,-0.3f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 449
	{3.07f,13.51f,3.72f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.01f,-1.44f,-0.95f,1.01f,-2.73f,-0.95f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 450
	{2.32f,5.47f,1.22f,0.53f,-0.2f,-0.32f,0.0f,0.0f,0.0f,1.06f,-1.22f,-0.04f,0.9f,1.3f,-0.21f,0.88f,-1.7f,-0.22f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.13f,0.0f,0.0f,-50.0f}, // 451
	{3.61f,14.57f,3.29f,0.5f,2.98f,0.82f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 452
	{5.14f,13.77f,9.29f,0.41f,1.57f,1.43f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 453
	{6.62f,19.05f,13.84f,-0.56f,2.73f,3.11f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 454
	{3.32f,9.7f,3.63f,0.49f,1.17f,0.6f,0.0f,0.0f,0.0f,-1.53f,-0.01f,-0.76f,1.29f,2.99f,-0.8f,1.29f,-2.99f,-0.8f,1.29f,-1.56f,-0.8f,0.0f,0.0f,-0.56f,0.0f,0.0f,-0.25f}, // 455
	{3.23f,9.52f,4.98f,0.42f,1.39f,0.22f,0.0f,0.0f,0.0f,0.79f,-0.05f,-0.61f,1.02f,2.56f,-0.58f,1.13f,-2.77f,-0.58f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.24f,0.0f,0.0f,-0.51f}, // 456
	{1.83f,2.61f,2.72f,0.34f,-0.27f,0.2f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.55f,0.97f,-0.35f,0.55f,-0.98f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-0.28f}, // 457
	{2.41f,6.14f,1.47f,0.45f,0.14f,-0.23f,0.43f,-1.02f,-0.22f,-1.11f,-2.05f,-0.11f,0.94f,1.7f,-0.44f,0.94f,-1.72f,-0.44f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.24f,0.0f,0.0f,-0.24f}, // 458
	{2.3f,5.72f,2.23f,0.49f,0.78f,0.06f,0.67f,-1.74f,0.0f,-1.05f,-2.29f,0.22f,0.88f,1.8f,-0.64f,0.92f,-1.85f,-0.64f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.32f,0.0f,0.0f,-0.32f}, // 459
	{10.85f,13.55f,4.44f,0.32f,0.28f,-0.04f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 460
	{0.7f,2.46f,1.68f,0.0f,-0.4f,0.47f,0.0f,-0.85f,0.6f,0.0f,0.14f,0.54f,0.0f,0.71f,-0.18f,0.0f,-0.89f,-0.18f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 461
	{0.71f,2.19f,1.63f,0.0f,-0.34f,0.42f,0.0f,-0.62f,0.38f,0.0f,0.0f,0.0f,0.0f,0.68f,-0.27f,0.0f,-0.67f,-0.27f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 462
	{0.7f,2.42f,1.34f,0.0f,-0.41f,0.15f,0.0f,-0.84f,0.34f,0.0f,0.17f,0.47f,0.0f,0.92f,-0.18f,0.0f,-0.92f,-0.18f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 463
	{1.58f,1.55f,1.15f,0.0f,0.0f,-0.36f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.4f,0.22f,-0.28f,0.1f,-0.75f,-0.06f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 464
	{0.87f,1.41f,1.02f,0.0f,0.0f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.3f,0.5f,-0.25f,0.3f,-0.35f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 465
	{2.53f,6.17f,1.65f,0.5f,0.15f,-0.14f,0.46f,-0.77f,-0.14f,0.0f,-3.0f,-0.13f,0.92f,1.79f,-0.35f,0.92f,-1.78f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.29f,0.0f,0.0f,-0.31f}, // 466
	{2.53f,6.36f,1.67f,0.46f,0.11f,-0.14f,0.46f,-0.87f,-0.16f,-1.07f,-2.3f,0.12f,0.9f,1.8f,-0.35f,0.9f,-1.78f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.32f,0.0f,0.0f,-0.32f}, // 467
	{0.71f,2.23f,1.42f,0.0f,-0.2f,0.4f,0.0f,-0.53f,0.42f,0.0f,0.01f,0.41f,0.0f,0.82f,-0.26f,0.0f,-0.75f,-0.29f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 468
	{2.42f,14.8f,3.15f,0.42f,0.95f,-0.07f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 469
	{2.66f,5.48f,2.1f,0.53f,-0.04f,0.09f,0.48f,-0.96f,0.09f,-1.26f,-2.38f,0.24f,1.03f,1.65f,-0.31f,1.03f,-1.89f,-0.31f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.29f,0.0f,0.0f,-0.1f}, // 470
	{1.42f,2.0f,1.71f,0.0f,-0.35f,0.39f,0.0f,-0.67f,0.39f,0.0f,0.0f,0.0f,0.41f,0.61f,-0.13f,0.41f,-0.61f,-0.13f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 471
	{2.67f,9.34f,4.87f,-0.2f,-0.16f,1.07f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 472
	{2.9f,5.4f,2.22f,0.0f,0.58f,0.89f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 473
	{2.43f,6.03f,1.69f,0.49f,-0.3f,-0.14f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.95f,1.81f,-0.35f,0.95f,-1.81f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.47f,0.0f,0.0f,-0.4f}, // 474
	{2.45f,5.78f,1.48f,0.42f,-0.13f,-0.2f,0.0f,0.0f,0.0f,-1.07f,-1.6f,0.13f,0.92f,1.54f,-0.35f,0.93f,-1.55f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.3f,0.0f,0.0f,-0.24f}, // 475
	{11.03f,11.29f,3.29f,0.0f,-0.45f,-0.32f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 476
	{2.67f,5.93f,1.4f,0.55f,-0.25f,-0.16f,0.0f,0.0f,0.0f,-1.2f,-1.53f,0.24f,1.02f,1.7f,-0.32f,1.02f,-1.62f,-0.32f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-0.08f}, // 477
	{2.45f,5.57f,1.74f,0.44f,0.09f,-0.06f,0.0f,0.0f,0.0f,1.09f,-0.34f,0.23f,0.87f,1.49f,-0.55f,0.87f,-1.62f,-0.55f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.38f}, // 478
	{2.25f,6.15f,1.99f,0.49f,-0.07f,0.0f,0.47f,-1.08f,0.04f,-1.09f,-1.97f,0.03f,0.91f,1.7f,-0.38f,0.91f,-1.59f,-0.38f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.27f,0.0f,0.0f,-0.27f}, // 479
	{2.27f,5.26f,1.42f,0.41f,-0.28f,-0.15f,0.0f,0.0f,0.0f,-1.0f,-0.88f,0.1f,0.91f,1.33f,-0.35f,0.91f,-1.33f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.33f}, // 480
	{0.71f,1.88f,1.32f,-0.01f,-0.34f,0.43f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.55f,-0.24f,0.0f,-0.59f,-0.24f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 481
	{2.34f,5.7f,1.87f,0.47f,0.53f,-0.13f,0.53f,-1.57f,-0.15f,1.07f,-2.19f,0.0f,0.88f,1.78f,-0.65f,0.88f,-1.79f,-0.65f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.51f,0.0f,0.0f,-0.6f}, // 482
	{2.05f,6.19f,2.11f,0.38f,1.65f,-0.18f,0.3f,0.06f,-0.21f,0.93f,-2.51f,-0.04f,0.79f,1.7f,-0.67f,0.78f,-2.06f,-0.67f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.74f,0.0f,0.0f,-0.72f}, // 483
	{5.35f,26.2f,7.16f,0.0f,-5.01f,1.74f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 484
	{1.97f,4.07f,1.44f,0.15f,-0.45f,0.37f,0.0f,0.0f,0.0f,-0.89f,0.72f,0.02f,0.63f,1.32f,-0.3f,0.63f,-0.99f,-0.3f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.25f,0.0f,0.0f,-0.25f}, // 485
	{4.34f,7.84f,4.45f,0.0f,-0.39f,1.13f,0.0f,0.0f,0.0f,-0.7f,-3.17f,0.58f,1.24f,1.68f,-0.35f,1.24f,-1.68f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 486
	{2.33f,15.04f,4.67f,0.46f,1.62f,-0.09f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 487
	{2.33f,12.61f,4.65f,0.45f,0.73f,-0.09f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 488
	{2.54f,5.7f,2.14f,0.5f,-0.09f,0.06f,0.0f,0.0f,0.0f,1.16f,-0.74f,0.0f,1.03f,1.72f,-0.66f,1.03f,-1.47f,-0.66f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.34f}, // 489
	{2.92f,6.93f,2.14f,0.53f,0.46f,0.06f,0.53f,-0.62f,0.06f,1.37f,-1.25f,0.0f,1.03f,2.29f,-0.66f,1.03f,-1.93f,-0.66f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.34f}, // 490
	{2.31f,6.33f,1.29f,0.43f,-0.28f,-0.22f,0.0f,0.0f,0.0f,-1.07f,-2.18f,0.0f,0.83f,1.57f,-0.42f,0.83f,-1.57f,-0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.23f,0.0f,0.0f,-0.24f}, // 491
	{2.35f,6.18f,1.79f,0.46f,0.14f,-0.1f,0.46f,-0.91f,-0.1f,-0.98f,-2.24f,0.12f,0.93f,1.71f,-0.35f,0.92f,-1.7f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.3f,0.0f,0.0f,-0.29f}, // 492
	{4.77f,17.83f,3.85f,-0.67f,0.6f,0.9f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 493
	{2.25f,6.49f,1.5f,0.48f,-0.29f,-0.27f,0.0f,0.0f,0.0f,-1.02f,-2.2f,0.12f,0.83f,1.45f,-0.4f,0.83f,-1.78f,-0.4f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.29f}, // 494
	{2.78f,5.45f,1.99f,0.49f,0.0f,-0.08f,0.0f,0.0f,0.0f,1.21f,-1.91f,-0.1f,1.14f,1.68f,-0.76f,1.14f,-1.31f,-0.76f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.43f,0.0f,0.0f,-0.43f}, // 495
	{2.28f,4.75f,1.79f,0.48f,-0.25f,-0.12f,0.0f,0.0f,0.0f,1.06f,-1.86f,0.15f,0.9f,1.44f,-0.32f,0.9f,-1.39f,-0.32f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.05f,0.0f,0.0f,-0.06f}, // 496
	{2.33f,15.04f,4.66f,0.46f,1.62f,-0.11f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 497
	{2.9f,6.6f,4.28f,0.73f,1.38f,0.3f,0.6f,-2.46f,0.04f,-1.3f,-0.01f,0.09f,1.09f,2.41f,-0.58f,0.99f,-1.74f,-0.58f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.47f,0.0f,0.0f,-0.56f}, // 498
	{2.64f,7.2f,3.75f,0.45f,0.21f,-0.01f,0.0f,0.0f,0.0f,-1.11f,-1.07f,-0.35f,0.86f,1.7f,-0.55f,0.86f,-2.13f,-0.55f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.33f,0.0f,0.0f,-0.26f}, // 499
	{2.29f,5.01f,1.85f,0.45f,-0.24f,-0.06f,0.0f,0.0f,0.0f,-0.98f,-1.71f,-0.07f,0.87f,1.59f,-0.62f,0.87f,-1.17f,-0.62f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.35f,0.0f,0.0f,-0.33f}, // 500
	{0.87f,1.41f,1.02f,0.0f,0.0f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.3f,0.5f,-0.25f,0.3f,-0.35f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 501
	{2.35f,5.97f,1.52f,0.42f,-0.12f,-0.28f,0.0f,0.0f,0.0f,-1.08f,-1.88f,0.14f,0.87f,1.62f,-0.4f,0.87f,-1.49f,-0.4f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.1f}, // 502
	{2.21f,6.14f,1.63f,0.41f,-0.29f,-0.29f,0.0f,0.0f,0.0f,-1.1f,-2.05f,0.03f,0.87f,1.45f,-0.4f,0.87f,-1.65f,-0.4f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.25f}, // 503
	{2.53f,6.04f,1.65f,0.46f,0.18f,-0.14f,0.46f,-0.77f,-0.14f,-1.16f,-1.83f,0.11f,0.92f,1.79f,-0.35f,0.92f,-1.78f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.29f,0.0f,0.0f,-0.31f}, // 504
	{2.54f,5.7f,2.14f,0.5f,-0.09f,0.06f,0.0f,0.0f,0.0f,1.16f,-0.74f,0.0f,1.03f,1.72f,-0.66f,1.03f,-1.47f,-0.66f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.34f}, // 505
	{2.25f,5.22f,1.17f,0.47f,-0.34f,-0.26f,0.0f,0.0f,0.0f,1.05f,-1.11f,-0.05f,0.89f,1.22f,-0.34f,0.89f,-1.66f,-0.34f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.19f,0.0f,0.0f,-0.18f}, // 506
	{2.57f,6.59f,1.62f,0.54f,0.05f,-0.25f,0.54f,-1.15f,-0.26f,-1.17f,-2.3f,0.11f,1.04f,1.8f,-0.45f,1.04f,-1.81f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.41f,0.0f,0.0f,-0.41f}, // 507
	{2.96f,8.05f,3.34f,0.54f,1.42f,-0.22f,0.0f,0.0f,0.0f,-1.38f,-3.05f,-0.67f,0.99f,2.29f,-0.9f,1.22f,-2.29f,-0.9f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.88f,0.0f,0.0f,-0.87f}, // 508
	{0.71f,1.9f,1.32f,0.0f,-0.48f,0.46f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.64f,-0.24f,0.0f,-0.59f,-0.19f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 509
	{0.72f,1.74f,1.12f,0.0f,-0.27f,0.54f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.6f,-0.26f,0.0f,-0.57f,-0.26f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 510
	{21.22f,21.19f,5.06f,0.42f,2.01f,-0.82f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 511
	{11.16f,6.16f,2.99f,0.0f,-0.22f,-0.1f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 512
	{8.7f,9.0f,2.23f,0.0f,-0.91f,-0.44f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 513
	{3.19f,10.07f,3.06f,0.45f,1.6f,0.19f,0.0f,0.0f,0.0f,1.43f,0.38f,-0.65f,1.23f,3.53f,-0.95f,1.23f,-4.43f,-0.95f,1.23f,-3.27f,-0.95f,0.0f,0.0f,-0.86f,0.0f,0.0f,-50.0f}, // 514
	{3.55f,9.95f,3.42f,0.56f,1.34f,0.09f,0.0f,0.0f,0.0f,-1.45f,0.48f,-1.31f,1.44f,3.49f,-1.39f,1.44f,-4.08f,-1.39f,1.44f,-2.64f,-1.39f,0.0f,0.0f,-1.16f,0.0f,0.0f,-50.0f}, // 515
	{2.6f,6.24f,1.71f,0.47f,0.07f,-0.15f,0.49f,-0.99f,-0.13f,-1.1f,-2.45f,-0.03f,0.91f,1.67f,-0.42f,0.91f,-1.6f,-0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.17f,0.0f,0.0f,-0.17f}, // 516
	{2.53f,6.33f,1.65f,0.51f,-0.02f,-0.18f,0.0f,0.0f,0.0f,-1.18f,-1.95f,0.07f,0.92f,1.68f,-0.41f,0.92f,-1.48f,-0.41f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.22f}, // 517
	{2.43f,6.0f,1.57f,0.51f,0.07f,-0.16f,0.0f,0.0f,0.0f,1.21f,-2.19f,-0.07f,0.94f,1.81f,-0.26f,0.98f,-1.46f,-0.27f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.33f,0.0f,0.0f,-0.23f}, // 518
	{20.31f,19.29f,6.94f,0.35f,5.18f,-0.12f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 519
	{8.75f,14.32f,2.16f,0.0f,2.84f,0.09f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 520
	{0.7f,2.46f,1.68f,0.0f,-0.4f,0.47f,0.0f,-0.85f,0.6f,0.0f,0.13f,0.61f,0.0f,0.76f,-0.16f,0.0f,-0.85f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 521
	{0.7f,2.46f,1.68f,0.0f,-0.4f,0.47f,0.0f,-0.85f,0.63f,0.0f,0.14f,0.61f,0.0f,0.76f,-0.16f,0.0f,-0.88f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 522
	{0.7f,2.47f,1.68f,0.0f,-0.4f,0.47f,0.0f,-0.68f,0.55f,0.0f,0.15f,0.55f,0.0f,0.76f,-0.16f,0.0f,-0.85f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 523
	{3.59f,8.84f,3.64f,0.49f,1.45f,-0.14f,0.0f,0.0f,0.0f,1.53f,0.48f,-0.99f,1.28f,2.95f,-1.24f,1.33f,-2.98f,-1.31f,1.33f,-1.86f,-1.31f,0.0f,0.0f,-1.0f,0.0f,0.0f,-0.23f}, // 524
	{3.05f,6.47f,3.29f,0.51f,0.26f,0.34f,0.0f,0.0f,0.0f,-1.39f,-0.51f,-0.09f,1.03f,2.09f,-0.38f,1.1f,-2.1f,-0.38f,0.0f,0.0f,0.0f,0.0f,0.0f,0.05f,0.0f,0.0f,-50.0f}, // 525
	{2.2f,5.4f,1.26f,0.47f,-0.08f,-0.22f,0.0f,0.0f,0.0f,-0.99f,-1.96f,0.06f,0.87f,1.49f,-0.4f,0.88f,-1.5f,-0.4f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.31f}, // 526
	{2.43f,5.72f,1.74f,0.41f,-0.02f,-0.08f,0.0f,0.0f,0.0f,-1.14f,-1.69f,0.14f,0.91f,1.61f,-0.35f,0.91f,-1.34f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.08f,0.0f,0.0f,-0.08f}, // 527
	{2.55f,5.55f,2.14f,0.5f,-0.14f,0.0f,0.0f,0.0f,0.0f,-1.09f,-2.03f,0.12f,0.95f,1.74f,-0.61f,0.95f,-1.54f,-0.61f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.49f,0.0f,0.0f,-0.39f}, // 528
	{2.38f,5.63f,1.86f,0.49f,-0.08f,-0.04f,0.49f,-1.04f,-0.04f,-1.2f,-2.22f,0.2f,0.95f,1.45f,-0.25f,0.95f,-1.66f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.02f,0.0f,0.0f,-0.03f}, // 529
	{1.58f,4.23f,2.68f,0.0f,-0.32f,0.39f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.49f,0.57f,-0.38f,0.51f,-0.71f,-0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 530
	{1.96f,3.7f,1.67f,0.0f,-0.46f,0.07f,0.0f,0.0f,0.0f,-0.01f,0.82f,0.43f,0.83f,1.43f,-0.62f,0.71f,-1.07f,-0.3f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 531
	{8.62f,11.39f,4.18f,1.01f,3.0f,0.59f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,2.88f,3.69f,-1.71f,1.76f,-1.67f,-1.5f,1.82f,1.67f,-1.15f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 532
	{2.38f,5.42f,1.49f,0.48f,-0.24f,-0.12f,0.0f,0.0f,0.0f,1.02f,-1.96f,0.14f,0.89f,1.57f,-0.35f,0.89f,-1.57f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.24f,0.0f,0.0f,-0.24f}, // 533
	{2.18f,6.27f,1.16f,0.59f,0.03f,-0.28f,0.0f,0.0f,0.0f,-1.04f,-0.82f,-0.2f,0.93f,1.86f,-0.27f,0.93f,-1.53f,-0.27f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.4f,0.0f,0.0f,-0.33f}, // 534
	{2.67f,5.48f,1.58f,0.42f,0.01f,-0.15f,0.0f,0.0f,0.0f,-1.2f,-0.56f,0.27f,0.97f,1.59f,-0.33f,0.97f,-1.62f,-0.33f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.37f,0.0f,0.0f,-50.0f}, // 535
	{2.46f,6.42f,1.3f,0.52f,-0.22f,-0.22f,0.0f,0.0f,0.0f,-1.07f,-1.69f,0.09f,0.9f,1.75f,-0.35f,0.9f,-1.73f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.34f,0.0f,0.0f,-0.37f}, // 536
	{3.33f,18.43f,5.2f,0.46f,5.13f,0.53f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 537
	{3.27f,16.59f,4.95f,0.71f,5.99f,0.37f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 538
	{2.5f,3.87f,2.56f,0.0f,0.35f,0.11f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 539
	{2.59f,6.07f,1.5f,0.52f,-0.06f,-0.26f,0.55f,-1.35f,-0.26f,-1.17f,-2.52f,-0.02f,1.0f,1.8f,-0.47f,1.0f,-1.9f,-0.47f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.21f,0.0f,0.0f,-0.21f}, // 540
	{2.27f,4.95f,1.24f,0.48f,-0.12f,-0.21f,0.0f,0.0f,0.0f,1.01f,-1.99f,0.15f,0.9f,1.5f,-0.25f,0.9f,-1.5f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.3f,0.0f,0.0f,-0.24f}, // 541
	{2.48f,6.4f,1.7f,0.51f,-0.15f,-0.12f,0.0f,0.0f,0.0f,-1.12f,-1.92f,0.31f,0.89f,1.62f,-0.37f,0.89f,-1.58f,-0.37f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.13f,0.0f,0.0f,0.06f}, // 542
	{2.38f,5.73f,1.86f,0.45f,0.09f,-0.05f,0.0f,0.0f,0.0f,-1.1f,-0.95f,0.0f,0.93f,1.58f,-0.45f,0.93f,-1.58f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.39f,0.0f,0.0f,-0.33f}, // 543
	{2.81f,12.86f,3.89f,0.6f,2.51f,0.29f,0.0f,0.0f,0.0f,-1.3f,2.07f,0.32f,1.05f,2.45f,-0.7f,1.05f,-2.05f,-0.7f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.62f,0.0f,0.0f,-50.0f}, // 544
	{2.19f,4.81f,1.69f,0.33f,-0.34f,-0.17f,0.0f,0.0f,0.0f,0.0f,-2.22f,-0.32f,0.85f,1.42f,-0.45f,0.85f,-1.42f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.53f,0.0f,0.0f,-0.53f}, // 545
	{2.57f,5.86f,1.67f,0.57f,-0.16f,-0.14f,0.51f,-1.16f,-0.11f,1.09f,-2.03f,0.15f,0.99f,1.63f,-0.34f,0.97f,-1.92f,-0.34f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.07f,0.0f,0.0f,-0.05f}, // 546
	{2.49f,5.84f,1.77f,0.52f,0.0f,-0.06f,0.52f,-1.0f,-0.06f,-1.17f,-2.01f,0.12f,0.92f,1.61f,-0.35f,0.92f,-1.48f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.08f,0.0f,0.0f,-0.07f}, // 547
	{4.18f,24.42f,4.91f,0.65f,4.57f,-0.81f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.2f,5.39f,-2.43f,1.67f,-1.5f,-2.43f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 548
	{2.4f,5.53f,1.43f,0.47f,0.25f,-0.15f,0.0f,0.0f,0.0f,-1.08f,-1.18f,0.22f,0.97f,1.74f,-0.36f,0.97f,-1.46f,-0.36f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.13f,0.0f,0.0f,-0.12f}, // 549
	{2.54f,5.89f,1.54f,0.52f,0.05f,-0.19f,0.52f,-0.92f,-0.23f,-1.07f,-2.49f,0.04f,0.98f,1.68f,-0.42f,0.98f,-1.87f,-0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.29f}, // 550
	{2.66f,6.72f,1.77f,0.49f,0.11f,-0.13f,0.49f,-1.06f,-0.11f,-1.15f,-2.67f,0.09f,0.94f,1.83f,-0.42f,0.94f,-1.77f,-0.43f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.15f,0.0f,0.0f,-0.14f}, // 551
	{2.65f,6.72f,3.56f,0.62f,0.64f,0.33f,0.0f,0.0f,0.0f,-1.29f,-0.96f,0.49f,1.04f,2.26f,-0.18f,1.04f,-1.43f,-0.18f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.03f,0.0f,0.0f,-50.0f}, // 552
	{28.74f,23.49f,7.39f,0.43f,9.53f,-0.1f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 553
	{2.68f,6.17f,2.09f,0.54f,0.1f,-0.03f,0.0f,0.0f,0.0f,1.21f,-2.39f,0.12f,1.1f,1.68f,-0.57f,1.1f,-1.7f,-0.57f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.34f,0.0f,0.0f,-0.36f}, // 554
	{2.0f,5.13f,1.42f,0.44f,-0.17f,-0.25f,0.0f,0.0f,0.0f,-0.79f,-1.5f,0.18f,0.76f,1.53f,-0.33f,0.72f,-1.54f,-0.33f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 555
	{3.66f,6.37f,3.29f,0.54f,0.1f,0.64f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.39f,1.71f,-0.45f,1.39f,-1.71f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,0.27f,0.0f,0.0f,0.27f}, // 556
	{3.66f,6.26f,3.29f,0.54f,0.0f,0.63f,0.0f,0.0f,0.0f,1.19f,-2.57f,0.85f,1.39f,1.67f,-0.45f,1.39f,-1.66f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,0.27f,0.0f,0.0f,0.25f}, // 557
	{2.23f,5.25f,1.75f,0.54f,-0.24f,-0.02f,0.0f,0.0f,0.0f,-1.09f,-1.94f,0.27f,0.89f,1.35f,-0.25f,0.89f,-1.52f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,0.05f,0.0f,0.0f,0.04f}, // 558
	{2.28f,5.48f,1.4f,0.48f,-0.19f,-0.2f,0.0f,0.0f,0.0f,-1.08f,-1.71f,0.27f,0.94f,1.46f,-0.25f,0.93f,-1.46f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.1f,0.0f,0.0f,0.01f}, // 559
	{2.32f,5.4f,1.62f,0.48f,0.11f,-0.08f,0.51f,-0.75f,-0.09f,1.14f,-1.9f,0.13f,0.95f,1.55f,-0.25f,0.95f,-1.45f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,0.02f,0.0f,0.0f,0.03f}, // 560
	{2.5f,5.8f,1.79f,0.52f,0.09f,-0.13f,0.52f,-0.82f,-0.13f,1.11f,-2.3f,0.11f,0.93f,1.71f,-0.41f,0.91f,-1.41f,-0.41f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.18f,0.0f,0.0f,-0.19f}, // 561
	{2.26f,5.31f,1.51f,0.51f,-0.05f,-0.14f,0.0f,0.0f,0.0f,1.04f,-0.7f,0.07f,0.9f,1.55f,-0.31f,0.91f,-1.3f,-0.31f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.05f,0.0f,0.0f,-0.02f}, // 562
	{3.39f,18.62f,4.71f,0.42f,2.64f,-0.34f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 563
	{0.87f,1.41f,1.02f,0.06f,-0.07f,0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.26f,0.4f,0.03f,0.26f,-0.4f,0.03f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 564
	{2.03f,4.82f,1.5f,0.48f,-0.06f,-0.16f,0.0f,0.0f,0.0f,0.91f,-0.87f,0.03f,0.83f,1.39f,-0.27f,0.83f,-1.39f,-0.27f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.07f,0.0f,0.0f,-0.06f}, // 565
	{2.51f,6.46f,1.66f,0.54f,0.09f,-0.17f,0.54f,-1.06f,-0.18f,1.08f,-2.44f,0.02f,0.98f,1.71f,-0.35f,0.98f,-1.71f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.25f,0.0f,0.0f,-0.27f}, // 566
	{2.71f,6.63f,1.58f,0.51f,0.25f,-0.27f,0.51f,-1.0f,-0.27f,0.0f,-2.86f,-0.46f,1.0f,2.07f,-0.48f,1.0f,-1.48f,-0.48f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.43f,0.0f,0.0f,-0.45f}, // 567
	{2.71f,4.61f,1.42f,0.0f,-0.03f,-0.19f,0.0f,0.0f,0.0f,-0.5f,-0.66f,0.38f,0.85f,1.75f,-0.5f,0.87f,-0.91f,-0.43f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 568
	{3.26f,18.43f,5.03f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 569
	{3.47f,21.07f,5.19f,0.0f,1.96f,-1.13f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 570
	{1.57f,2.33f,1.58f,0.0f,-0.18f,-0.1f,0.0f,0.0f,0.0f,0.0f,0.19f,0.02f,0.52f,0.57f,-0.16f,0.55f,-0.63f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.17f,0.0f,0.0f,-50.0f}, // 571
	{1.66f,2.35f,2.02f,0.0f,-0.62f,0.31f,0.0f,0.0f,0.0f,-0.38f,-0.97f,0.16f,0.48f,0.69f,-0.35f,0.48f,-0.69f,-0.29f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 572
	{2.93f,7.38f,3.16f,0.56f,2.03f,0.27f,0.0f,0.0f,0.0f,-1.18f,0.48f,-0.48f,1.05f,1.77f,-0.93f,0.96f,-1.76f,-0.93f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.63f,0.0f,0.0f,-0.73f}, // 573
	{1.62f,3.85f,2.5f,0.23f,0.55f,0.25f,0.0f,0.0f,0.0f,-0.75f,-0.97f,0.28f,0.57f,0.8f,-0.44f,0.57f,-0.8f,-0.44f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.3f,0.0f,0.0f,-0.3f}, // 574
	{2.49f,5.83f,1.93f,0.5f,0.06f,0.01f,0.0f,0.0f,0.0f,0.0f,-2.78f,-0.05f,0.92f,1.71f,-0.25f,0.92f,-1.71f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.21f}, // 575
	{2.42f,6.36f,1.85f,0.47f,-0.16f,-0.09f,0.0f,0.0f,0.0f,0.0f,-3.16f,-0.25f,0.93f,1.71f,-0.25f,0.92f,-1.71f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.27f}, // 576
	{62.49f,61.44f,34.95f,1.29f,21.06f,4.12f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 577
	{3.15f,11.79f,2.78f,0.47f,3.43f,0.06f,0.0f,0.0f,0.0f,-1.24f,2.91f,-0.02f,1.25f,3.0f,-1.0f,1.25f,-3.98f,-1.0f,1.25f,-2.75f,-1.0f,0.0f,0.0f,-0.86f,0.0f,0.0f,-50.0f}, // 578
	{2.47f,6.21f,2.56f,0.46f,-0.16f,0.22f,0.43f,-1.23f,0.24f,1.22f,-2.3f,0.17f,0.96f,1.58f,-0.44f,0.96f,-1.58f,-0.44f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.18f,0.0f,0.0f,-0.18f}, // 579
	{2.66f,5.77f,2.24f,0.54f,-0.01f,0.06f,0.43f,-0.91f,0.05f,1.19f,-1.82f,0.24f,1.08f,1.78f,-0.3f,1.08f,-1.78f,-0.3f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.35f,0.0f,0.0f,-0.26f}, // 580
	{0.7f,2.46f,1.68f,0.0f,-0.4f,0.47f,0.0f,-0.85f,0.6f,0.0f,0.13f,0.54f,0.0f,0.76f,-0.16f,0.0f,-0.82f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 581
	{2.44f,7.22f,3.19f,0.42f,0.56f,-0.04f,0.55f,-2.49f,-0.08f,-1.06f,0.14f,-0.28f,0.9f,1.86f,-0.62f,0.9f,-2.07f,-0.62f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.45f,0.0f,0.0f,-0.46f}, // 582
	{1.67f,3.66f,3.21f,0.0f,-1.01f,0.61f,0.0f,0.0f,0.0f,-0.76f,0.41f,-0.06f,0.63f,1.13f,-0.22f,0.62f,-1.12f,-0.14f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.03f,0.0f,0.0f,-50.0f}, // 583
	{3.55f,15.91f,3.4f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.13f,-2.64f,-1.45f,1.13f,-3.78f,-1.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 584
	{2.44f,6.53f,2.06f,0.47f,0.0f,0.07f,0.43f,-1.05f,0.05f,1.14f,-2.3f,0.2f,1.01f,1.8f,-0.23f,1.01f,-1.8f,-0.23f,0.0f,0.0f,0.0f,0.0f,0.0f,0.02f,0.0f,0.0f,0.07f}, // 585
	{0.7f,2.8f,1.96f,0.0f,-0.42f,0.38f,0.0f,-0.77f,0.49f,0.0f,0.0f,0.0f,0.0f,0.85f,-0.16f,0.0f,-0.84f,-0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 586
	{2.61f,5.76f,1.45f,0.52f,-0.24f,-0.23f,0.0f,0.0f,0.0f,-1.23f,-1.22f,0.1f,0.98f,1.48f,-0.36f,0.98f,-1.62f,-0.36f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.15f,0.0f,0.0f,-0.06f}, // 587
	{3.08f,8.62f,7.53f,0.7f,2.29f,0.47f,0.0f,0.0f,0.0f,-1.46f,-2.16f,0.22f,1.29f,2.13f,-0.47f,1.29f,-2.12f,-0.47f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.56f,0.0f,0.0f,-0.56f}, // 588
	{2.26f,5.09f,2.12f,0.42f,-0.02f,0.05f,0.0f,0.0f,0.0f,0.98f,-0.89f,0.12f,0.96f,1.64f,-0.23f,0.96f,-1.63f,-0.23f,0.0f,0.0f,0.0f,0.0f,0.0f,0.01f,0.0f,0.0f,0.01f}, // 589
	{3.44f,18.4f,5.03f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 590
	{3.18f,13.63f,4.66f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.01f,-1.44f,-0.95f,1.01f,-2.73f,-0.95f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 591
	{44.45f,57.57f,18.43f,0.56f,12.51f,-0.42f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 592
	{12.59f,13.55f,3.57f,0.32f,0.03f,-0.07f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 593
	{0.5f,0.92f,0.3f,0.06f,-0.07f,0.16f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.22f,0.15f,0.07f,0.22f,-0.15f,0.07f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 594
	{2.85f,13.47f,2.21f,0.48f,0.9f,-0.01f,-0.02f,-4.29f,0.47f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 595
	{2.41f,5.91f,1.77f,0.52f,0.06f,-0.14f,0.52f,-1.03f,-0.11f,-1.11f,-2.16f,0.1f,0.92f,1.64f,-0.35f,0.92f,-1.64f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.32f}, // 596
	{2.41f,5.91f,1.77f,0.52f,0.06f,-0.14f,0.52f,-1.03f,-0.11f,-1.1f,-2.15f,0.1f,0.92f,1.64f,-0.35f,0.92f,-1.64f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.28f,0.0f,0.0f,-0.32f}, // 597
	{2.41f,5.79f,1.77f,0.52f,0.06f,-0.06f,0.52f,-1.03f,-0.11f,-1.08f,-1.96f,0.16f,0.96f,1.64f,-0.35f,0.96f,-1.64f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.22f,0.0f,0.0f,-0.2f}, // 598
	{2.92f,6.16f,2.14f,0.5f,-0.09f,0.06f,0.0f,0.0f,0.0f,1.16f,-0.74f,0.0f,1.03f,1.72f,-0.66f,1.03f,-1.47f,-0.66f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.38f,0.0f,0.0f,-0.34f}, // 599
	{2.4f,6.06f,1.56f,0.52f,0.06f,-0.1f,0.0f,0.0f,0.0f,1.09f,-2.03f,0.08f,0.96f,1.83f,-0.34f,0.96f,-1.41f,-0.34f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.31f}, // 600
	{3.08f,6.96f,3.83f,0.53f,-0.3f,0.42f,0.0f,0.0f,0.0f,-1.33f,-1.69f,0.92f,0.93f,1.68f,-0.07f,0.92f,-1.67f,-0.07f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 601
	{2.32f,5.54f,1.29f,0.48f,-0.12f,-0.22f,0.0f,0.0f,0.0f,1.09f,-1.99f,0.11f,0.93f,1.54f,-0.4f,0.93f,-1.53f,-0.4f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.42f,0.0f,0.0f,-0.36f}, // 602
	{2.64f,6.07f,1.43f,0.52f,-0.42f,-0.27f,0.0f,0.0f,0.0f,1.18f,-2.19f,-0.08f,1.02f,1.6f,-0.41f,1.02f,-1.58f,-0.41f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.31f,0.0f,0.0f,-0.26f}, // 603
	{2.53f,6.17f,1.65f,0.5f,0.15f,-0.14f,0.46f,-0.77f,-0.14f,0.0f,-3.0f,-0.13f,0.92f,1.79f,-0.35f,0.92f,-1.78f,-0.35f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.29f,0.0f,0.0f,-0.31f}, // 604
	{2.38f,5.73f,1.86f,0.45f,0.09f,-0.05f,0.0f,0.0f,0.0f,-1.1f,-0.95f,0.0f,0.93f,1.58f,-0.45f,0.93f,-1.58f,-0.45f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.39f,0.0f,0.0f,-0.33f}, // 605
	{2.93f,3.38f,1.97f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.64f,1.17f,-0.69f,0.64f,-1.17f,-0.69f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 606
	{3.02f,3.26f,1.6f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.64f,1.19f,-0.7f,0.64f,-1.0f,-0.7f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 607
	{1.45f,4.65f,6.36f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.74f,1.24f,-1.17f,0.74f,-1.27f,-1.17f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 608
	{2.9f,6.6f,4.22f,0.73f,1.38f,0.3f,0.6f,-2.46f,0.04f,-1.3f,0.0f,0.1f,1.09f,2.41f,-0.58f,0.99f,-1.74f,-0.58f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.47f,0.0f,0.0f,-0.56f}, // 609
	{2.48f,1.43f,1.63f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.14f,-0.41f,-0.14f,1.14f,-0.72f,-0.14f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f}, // 610
	{2.13f,3.16f,1.83f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.93f,0.34f,-0.25f,0.93f,-0.38f,-0.25f,0.0f,0.0f,0.0f,0.0f,0.0f,-50.0f,0.0f,0.0f,-50.0f} // 611
};

int Utils::GetTypeByComponentId(short sModelId)
{
	switch (sModelId)
	{
	case 1000: case 1001: case 1002: case 1003: case 1014: case 1015:
	case 1016: case 1023: case 1049: case 1050: case 1058: case 1060:
	case 1138: case 1139: case 1146: case 1147: case 1158: case 1162:
	case 1163: case 1164:
		return 0; // CARMODTYPE_SPOILER
	case 1004: case 1005: case 1011: case 1012:
		return 1; // CARMODTYPE_HOOD
	case 1006: case 1032: case 1033: case 1035: case 1038: case 1053:
	case 1054: case 1055: case 1061: case 1067: case 1068: case 1088:
	case 1091: case 1103: case 1128: case 1130: case 1131:
		return 2; // CARMODTYPE_ROOF
	case 1007: case 1017: case 1026: case 1027: case 1030: case 1031:
	case 1036: case 1039: case 1040: case 1041: case 1042: case 1047:
	case 1048: case 1051: case 1052: case 1056: case 1057: case 1062:
	case 1063: case 1069: case 1070: case 1071: case 1072: case 1090:
	case 1093: case 1094: case 1095: case 1099: case 1101: case 1102:
	case 1106: case 1107: case 1108: case 1118: case 1119: case 1120:
	case 1121: case 1122: case 1124: case 1133: case 1134: case 1137:
		return 3; // CARMODTYPE_SIDESKIRT
	case 1013: case 1024:
		return 4; // CARMODTYPE_LAMPS
	case 1008: case 1009: case 1010:
		return 5; // CARMODTYPE_NITRO
	case 1018: case 1019: case 1020: case 1021: case 1022: case 1028:
	case 1029: case 1034: case 1037: case 1043: case 1044: case 1045:
	case 1046: case 1059: case 1064: case 1065: case 1066: case 1089:
	case 1092: case 1104: case 1105: case 1113: case 1114: case 1126:
	case 1127: case 1129: case 1132: case 1135: case 1136:
		return 6; // CARMODTYPE_EXHAUST
	case 1025: case 1073: case 1074: case 1075: case 1076: case 1077:
	case 1078: case 1079: case 1080: case 1081: case 1082: case 1083:
	case 1084: case 1085: case 1096: case 1097: case 1098:
		return 7; // CARMODTYPE_WHEELS
	case 1086:
		return 8; // CARMODTYPE_STEREO
	case 1087:
		return 9; // CARMODTYPE_HYDRAULICS
	case 1117: case 1152: case 1153: case 1155: case 1157: case 1160:
	case 1165: case 1166: case 1169: case 1170: case 1171: case 1172:
	case 1173: case 1174: case 1175: case 1179: case 1181: case 1182:
	case 1185: case 1188: case 1189: case 1190: case 1191:
		return 10; // CARMODTYPE_FRONT_BUMPER
	case 1140: case 1141: case 1148: case 1149: case 1150: case 1151:
	case 1154: case 1156: case 1159: case 1161: case 1167: case 1168:
	case 1176: case 1177: case 1178: case 1180: case 1183: case 1184:
	case 1186: case 1187: case 1192: case 1193:
		return 11; // CARMODTYPE_REAR_BUMPER
	case 1143: case 1145:
		return 12; // CARMODTYPE_VENT_RIGHT
	case 1142: case 1144:
		return 13; // CARMODTYPE_VENT_LEFT
	case 1100: case 1123: case 1125:
		return 14; // CARMODTYPE_BULLBARS
	case 1109: case 1110:
		return 15; // CARMODTYPE_REAR_BULLBARS
	case 1115: case 1116:
		return 16; // CARMODTYPE_FRONT_BULLBARS;
	}
	return -1;
}

bool IsVehicleModelIdValid(int iId)
{
	return (iId >= 400 && iId <= 611);
}

const char* GetVehicleName(int iModelId)
{
	return g_szVehicleNames[iModelId - 400];
}

bool IsPedSkinIdValid(int iId)
{
	return (iId >= 0 && iId <= 299);
}

const float* GetVehicleModelInfoData(int modelid, int infotype)
{
	int index = modelid - 400;
	switch (infotype) {
	case 1: return &g_fModelInfo[index][0]; // VEHICLE_MODEL_INFO_SIZE
	case 2: return &g_fModelInfo[index][3]; // VEHICLE_MODEL_INFO_FRONTSEAT
	case 3: return &g_fModelInfo[index][6]; // VEHICLE_MODEL_INFO_REARSEAT
	case 4: return &g_fModelInfo[index][9]; // VEHICLE_MODEL_INFO_PETROLCAP
	case 5: return &g_fModelInfo[index][12]; // VEHICLE_MODEL_INFO_WHEELSFRONT
	case 6: return &g_fModelInfo[index][15]; // VEHICLE_MODEL_INFO_WHEELSREAR
	case 7: return &g_fModelInfo[index][18]; // VEHICLE_MODEL_INFO_WHEELSMID
	case 8: return &g_fModelInfo[index][21]; // VEHICLE_MODEL_INFO_FRONT_BUMPER_Z
	case 9: return &g_fModelInfo[index][24]; // VEHICLE_MODEL_INFO_REAR_BUMPER_Z
	}
	return NULL;
}

const char* GetWeaponName(int iWeaponID)
{
	switch (iWeaponID) {
	case WEAPON_FIST:
		return "Fist";
	case WEAPON_BRASSKNUCKLE:
		return "Brass Knuckles";
	case WEAPON_GOLFCLUB:
		return "Golf Club";
	case WEAPON_NITESTICK:
		return "Nite Stick";
	case WEAPON_KNIFE:
		return "Knife";
	case WEAPON_BAT:
		return "Baseball Bat";
	case WEAPON_SHOVEL:
		return "Shovel";
	case WEAPON_POOLSTICK:
		return "Pool Cue";
	case WEAPON_KATANA:
		return "Katana";
	case WEAPON_CHAINSAW:
		return "Chainsaw";
	case WEAPON_DILDO:
		return "Dildo";
	case WEAPON_DILDO2:
		return "Dildo";
	case WEAPON_VIBRATOR:
		return "Vibrator";
	case WEAPON_VIBRATOR2:
		return "Vibrator";
	case WEAPON_FLOWER:
		return "Flowers";
	case WEAPON_CANE:
		return "Cane";
	case WEAPON_GRENADE:
		return "Grenade";
	case WEAPON_TEARGAS:
		return "Teargas";
	case WEAPON_MOLTOV:
		return "Molotov Cocktail";
	case WEAPON_COLT45:
		return "Colt 45";
	case WEAPON_SILENCED:
		return "Silenced Pistol";
	case WEAPON_DEAGLE:
		return "Desert Eagle";
	case WEAPON_SHOTGUN:
		return "Shotgun";
	case WEAPON_SAWEDOFF:
		return "Sawn-off Shotgun";
	case WEAPON_SHOTGSPA: 
		return "Combat Shotgun";
	case WEAPON_UZI:
		return "UZI";
	case WEAPON_MP5:
		return "MP5";
	case WEAPON_AK47:
		return "AK47";
	case WEAPON_M4:
		return "M4";
	case WEAPON_TEC9:
		return "TEC9";
	case WEAPON_RIFLE:
		return "Rifle";
	case WEAPON_SNIPER:
		return "Sniper Rifle";
	case WEAPON_ROCKETLAUNCHER:
		return "Rocket Launcher";
	case WEAPON_HEATSEEKER:
		return "Heat Seaker";
	case WEAPON_FLAMETHROWER:
		return "Flamethrower";
	case WEAPON_MINIGUN:
		return "Minigun";
	case WEAPON_SATCHEL:
		return "Satchel Explosives";
	case WEAPON_BOMB:
		return "Bomb";
	case WEAPON_SPRAYCAN:
		return "Spray Can";
	case WEAPON_FIREEXTINGUISHER:
		return "Fire Extinguisher";
	case WEAPON_CAMERA:
		return "Camera";
	case WEAPON_NIGHT_VIS_GOGGLES:
		return "Night Vision Goggles";
	case WEAPON_THERMAL_GOGGLES:
		return "Thermal Goggles";
	case WEAPON_PARACHUTE:
		return "Parachute";
	case WEAPON_VEHICLE:
		return "Vehicle";
	case WEAPON_DROWN:
		return "Drowned";
	case WEAPON_COLLISION:
		return "Splat";
	}
	return "";
}

// Apperently Rhinos would have siren, but it is disabled by the main function on game wise
// From adddress: gta_sa.exe:0x006D8470
bool VehicleModelWithSiren(int iModelId)
{
	switch (iModelId) {
	case 427: // Enforcer
	case 430: // Predator
	//case 432: // Rhino
	case 433: // Barracks
	case 490: // FBI Rancher
	case 523: // HPV1000
	case 528: // FBI Truck
	case 596: // LSPD Police Car
	case 597: // SFPD Police Car
	case 598: // LVPD Police Car
	case 599: // Police Ranger
	case 601: // S.W.A.T.

	case 407: // Firetruck
	case 416: // Ambulance
	case 423: // Mr.Whoopee
		return true;
	}
	return false;
}

void Util_UrlUnencode(char *enc)
{
	char *write_pos = enc;

	while(*enc)
	{
		if(*enc=='%')
		{
			*write_pos = (*++enc>'/'&&*enc<':')?((*enc-('0'))<<4):((*enc-('7'))<<4);
			*write_pos |= (*++enc>'/'&&*enc<':')?(*enc-'0'):(*enc-'7');
		}
		else if (*enc=='+')
			*write_pos= ' ';
		else
			*write_pos= *enc;

		write_pos++; enc++;
	}
	*write_pos='\0';
}

//----------------------------------------------------

char Util_toupper(char c) {return ((c>(char)0x60) && (c<(char)0x7b))? c-0x20:c;}

//----------------------------------------------------

char *Util_stristr(const char *String, const char *Pattern)
{
      char *pptr, *sptr, *start;

      for (start = (char *)String; *start != 0; start++)
      {
            /* find start of pattern in string */
            for ( ; ((*start!=0) && (Util_toupper(*start) != Util_toupper(*Pattern))); start++)
                  ;
            if (0 == *start)
                  return NULL;

            pptr = (char *)Pattern;
            sptr = (char *)start;

            while (Util_toupper(*sptr) == Util_toupper(*pptr))
            {
                  sptr++;
                  pptr++;

                  /* if end of pattern then pattern was found */

                  if (0 == *pptr)
                        return (start);
            }
      }
      return NULL;
}

//----------------------------------------------------

void Util_strupr(char *string)
{
	char *p = string;

	while(*p) {
		*p = Util_toupper(*p);
		p++;
	}
}

//----------------------------------------------------

int Util_wildcmp(char *wild, char *string)
{
	char *cp = 0, *mp = 0;
	
	while((*string) && (*wild != '*'))
	{
		if((*wild != *string) && (*wild != '?'))
		{
			return 0;
		}
		wild++;
		string++;
	}
		
	while (*string)
	{
		if (*wild == '*')
		{
			if (!*++wild)
			{
				return 1;
			}
			mp = wild;
			cp = string+1;
		}
		else if ((*wild == *string) || (*wild == '?'))
		{
			wild++;
			string++;
		}
		else
		{
			wild = mp;
			string = cp++;
		}
	}
		
	while (*wild == '*')
	{
		wild++;
	}

	return !*wild;
}

//----------------------------------------------------

int Util_strnicmp(const char *s1, const char *s2, size_t n)
{

  if (n == 0) return 0;

  do
  {
    if (Util_toupper((unsigned char)*s1) != Util_toupper((unsigned char)*s2++))
      return (int)Util_toupper((unsigned char)*s1) - (int)Util_toupper((unsigned char)*--s2);
    if (*s1++ == 0)
      break;

  } while (--n != 0);

  return 0;
}

//----------------------------------------------------

char *Util_strrev(char *str)
{
      char *p1, *p2;

      if (! str || ! *str)
            return str;
      for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
      {
            *p1 ^= *p2;
            *p2 ^= *p1;
            *p1 ^= *p2;
      }
      return str;
}

//----------------------------------------------------

char * Util_itoa(int v, char *s, int r)
{
	int i,neg = 0;
	char *p = s;
	char *q = s;

	if (r < 0 || r > 35) {
		*s = 0;
		return (s);
		}
	if (r == 0) r = 10;
	if (v == 0) {
		*p++ = '0';
		*p = 0;
		return (s);
		}
	if (v < 0) {
		neg = 1;
		v = -v;
		}
	while (v > 0) {
		i = v % r;
		if (i > 9) i += 7;
		*p++ = '0' + i;
		v /= r;
		}
	if (neg) *p++ = '-';
	*p-- = 0;
	q = s;
	while (p > q) {
		i = *q;
		*q++ = *p;
		*p-- = i;
		}
	return (s);
}

//----------------------------------------------------

char * Base64Encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

void Util_Base64Encode( char *cpInput, char *cpOutput )
{
int nIdx[ 4 ];  
while ( '\0' != *cpInput )
{
  nIdx[0] = ((*cpInput) & 0xFC)>>2;
  nIdx[1] = ((*cpInput) & 0x03)<<4;
  cpInput++;
  if ( '\0' != *cpInput )
  {
    nIdx[1] |= ((*cpInput) & 0xF0)>>4;
    nIdx[2]  = ((*cpInput) & 0x0F)<<2;
    cpInput++;
    if ( '\0' != (*cpInput) )
    {
      nIdx[2] |= ((*cpInput) & 0xC0) >> 6;
      nIdx[3]  = (*cpInput) & 0x3F;
      cpInput++;
    }
    else
      nIdx[3] = 64;
  }
  else
  {
    nIdx[2] = 64;
    nIdx[3] = 64;
  }

  *(cpOutput+0) = *(Base64Encoding + nIdx[0]);
  *(cpOutput+1) = *(Base64Encoding + nIdx[1]);
  *(cpOutput+2) = *(Base64Encoding + nIdx[2]);
  *(cpOutput+3) = *(Base64Encoding + nIdx[3]);
  cpOutput += 4;
}

*cpOutput = '\0';

return;
}

//----------------------------------------------------

bool ContainsInvalidNickChars(char * szString)
{
	while(*szString) {
		if( (*szString >= '0' && *szString <= '9') ||
			(*szString >= 'A' && *szString <= 'Z') ||
			(*szString >= 'a' && *szString <= 'z')  ||
			*szString == ']' || *szString == '[' ||
			*szString == '_' || //*szString == '\'' ||
			*szString == '$' || //*szString == ':' ||
			*szString == '=' || *szString == '(' ||
			*szString == ')' || *szString == '@' || 
			*szString == '.' ) {

			szString++;
		} else {
			return true;
		}
	}
	return false;
}

//----------------------------------------------------

bool IsHexChar(char c)
{
	return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f';
}

//----------------------------------------------------

unsigned long GetColorFromStringEmbed(char* szString)
{
	//char szHex[7] = { 0 }; // [17];

	if (*szString &&
		*szString == '{' &&
		*(szString + 1) &&
		IsHexChar(*(szString + 1)) &&
		*(szString + 2) &&
		IsHexChar(*(szString + 2)) &&
		*(szString + 3) &&
		IsHexChar(*(szString + 3)) &&
		*(szString + 4) &&
		IsHexChar(*(szString + 4)) &&
		*(szString + 5) &&
		IsHexChar(*(szString + 5)) &&
		*(szString + 6) &&
		IsHexChar(*(szString + 6)) &&
		*(szString + 7) &&
		*(szString + 7) == '}')
	{
		//memset(szHex, 0, sizeof(szHex));
		//strncpy_s(szHex, szString + 1, 6);
		//return strtoul(szHex, 0, 16);
		return 0;
	}
	return -1;
}

//----------------------------------------------------

void RemoveColorEmbedsFromString(char* szString)
{
	char* szCurrent, * szNext;

	szCurrent = szString;
	szNext = szString + 8;
	while (*szCurrent)
	{
		if (GetColorFromStringEmbed(szCurrent) == (unsigned long)-1)
		{
			szCurrent++;
			szNext++;
		}
		else
			strcpy_s(szCurrent, RSIZE_MAX, szNext);
	}
	*szCurrent = '\0';
}

//----------------------------------------------------

void ReplaceBadChars(char * szString)
{
	RemoveColorEmbedsFromString(szString);

	while(*szString) {
		//if(*szString >= 1 && *szString < ' ') *szString = '?';
		//if(*szString == '%') *szString = '?';
		if (*szString == '%' || *szString == '~' && *(szString + 1) == 'k')
			*szString = '#';

		szString++;
	}
}

//----------------------------------------------------

int CanFileBeOpenedForReading(char * filename)
{
	FILE *f;
	if(f=fopen(filename,"r")) {
		fclose(f);
		return 1;
	}
	return 0;
}

//----------------------------------------------------
void MatrixToQuaternion(MATRIX4X4* m, QUATERNION* q)
{
	float t, w, x, y, z, s;
	
	t = m->right.X + m->up.Y + m->at.Z + 1.0f;
	if (t < 0.0f) t = 0.0f;
	w = sqrtf(t) * 0.5f;

	t = m->right.X + 1.0f - m->up.Y - m->at.Z;
	if (t < 0.0f) t = 0.0f;
	x = sqrtf(t) * 0.5f;

	s = 1.0f - m->right.X;
	t = m->up.Y + s - m->at.Z;
	if (t < 0.0f) t = 0.0f;
	y = sqrtf(t) * 0.5f;

	t = s - m->up.Y + m->at.Z;
	if (t < 0.0f) t = 0.0f;
	z = sqrtf(t) * 0.5f;

	if (w < 0.0f) w = 0.0f;
	if (x < 0.0f) x = 0.0f;
	if (y < 0.0f) y = 0.0f;
	if (z < 0.0f) z = 0.0f;

	q->W = w;
	q->X = _copysignf(x, m->at.Y - m->up.Z);
	q->Y = _copysignf(y, m->right.Z - m->at.X);
	q->Z = _copysignf(z, m->up.X - m->right.Y);
}

//----------------------------------------------------

bool IsValidClientCheckParams(int iType, int iOffset, int iCount)
{
	if (iType == 2 || iType == 5 || (iType >= 69 && iType <= 72) &&
		(iOffset >= 0 && iOffset <= 256) &&
		(iCount >= 2 && iCount <= 256))
	{
		return true;
	}
	return false;
}

//----------------------------------------------------

